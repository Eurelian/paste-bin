{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","duration","result","event","this","setState","target","value","preventDefault","text","refs","name","length","alert","myHeaders","Headers","append","urlencoded","URLSearchParams","fetch","method","headers","body","redirect","then","response","catch","error","console","log","className","src","alt","onSubmit","e","handleSubmit","htmlFor","ref","type","placeholder","id","onChange","handleDuration","class","rows","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a75353af.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\nconstructor(props){\n  super(props)\n  this.state={\n    duration: '10M',\n    result:\"~~~~\" \n}\n}\n\n\n\nhandleDuration(event){\n  this.setState({duration: event.target.value})\n}\n\nhandleSubmit(event){\nevent.preventDefault();\nlet text = this.refs.text.value;\nlet name =  this.refs.name.value;\nlet duration = this.state.duration\n\nif(text.length <1 || name.length < 1 ) return alert(\"Please fill in all the required fields\")\n\nelse{\n\n\nlet myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nmyHeaders.append(\"Cookie\", \"__cfduid=da29862a78ae0efe4aebfe23ebafa54571588150853\");\n\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"api_dev_key\", \"aabf025e380b1950c9dcd75a255f7ea8\");\nurlencoded.append(\"api_paste_code\", text);\nurlencoded.append(\"api_option\", \"paste\");\nurlencoded.append(\"api_paste_expire_date\", duration)\nurlencoded.append(\"api_paste_name\", name);\n\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\n\nfetch(\"https://cors-anywhere.herokuapp.com/https://pastebin.com/api/api_post.php\", requestOptions)\n  .then(response => response.text())\n  .then(result => this.setState({result: result}))\n  .catch(error => console.log('error', error));\n  \n console.log(text)\n console.log(name)\n console.log(duration)\n this.refs.name.value=\"\";\n this.refs.text.value=\"\";  \n}\n}\n\n\n  \n  render(){\n\n\n    \n  return (\n    \n    <div className=\"App wrapper\">\n    <img\n        className=\"logo\"\n        src=\"https://pastebin.com/i/pastebin_logo_side_outline.png\"\n        alt=\"pastebin\"\n      />\n      <form onSubmit={(e)=>this.handleSubmit(e)}>\n      {/* FILENAME */}\n      <div className=\"form-field\">\n        <label htmlFor=\"api_paste_name\">Name Your File</label>\n        <input ref=\"name\" type=\"text\" placeholder=\"Filename\" id=\"api_paste_name\"\n            name=\"api_paste_name\"/>\n      </div>\n      {/* FILE DURATION */}\n      <div className=\"form-field\">\n        <label  htmlFor=\"api_paste_expire_date\">Storage Duration</label>\n        <select value={this.state.duration} id=\"api_paste_expire_date\" onChange={(e)=>this.handleDuration(e)}\n            name=\"api_paste_expire_date\" className=\"decorated\">\n          <option  value=\"10M\">10 Minutes</option>\n          <option  value=\"1H\">1 Hour</option>\n          <option  value=\"1D\">1 Day</option>\n        </select>\n      </div>\n      {/* MESSAGE */}\n      <div className=\"form-field\">\n        <label>Your Message</label>\n        <textarea  ref=\"text\" class=\"form-control\" id=\"api_paste_code\" name=\"api_paste_code\" rows=\"10\" placeholder=\"Your Message Here...\"/>\n      </div>\n      {/* HAVE NO IDEA WHAT THIS IS */}\n        <input type=\"hidden\" name=\"api_paste_private\" value=\"0\" />\n        <input type=\"hidden\" name=\"api_option\" value=\"paste\" />\n        <input type=\"hidden\" name=\"api_user_key\" value=\"\" />\n        <input\n          type=\"hidden\"\n          name=\"api_dev_key\"\n          value=\"10d0f6cee26d024fa57e968ab041a14a\"\n        />\n        {/*SUBMIT BUTTON  */}\n      <div className=\"form-field\">\n        <button type=\"submit\" className=\"btn btn-info\">Submit</button>\n      </div>\n      \n\n      </form>\n      <div className=\"confirmation\">\n      <p>{this.state.result.length < 40 ? `You can find your new file here: ${this.state.result}`: this.state.result }</p>\n      </div>\n\n    </div>\n    \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}